{"version":3,"sources":["containers/nfl/components/Settings/force-players.js","containers/nfl/components/Settings/inputs/BracketOwnershipSliders.js","containers/nfl/components/Settings/general-settings-card.js","containers/nfl/components/Settings/index.js"],"names":["SettingsInputSmall","styled","Input","SettingsContainer","div","TextSpan","span","MaxInputForThresholds","Component","InputLabel","InlineColPct","Col","SliderValueLeft","SliderValueRight","underOwnedPercentages","maxForSites","minUnderOwn_1","minUnderOwn_2","minUnderOwn_3","minUnderOwn_4","minUnderOwn_5","maxUnderOwn_1","maxUnderOwn_2","maxUnderOwn_3","maxUnderOwn_4","maxUnderOwn_5","inputOnChange","noProjOwn","showdown","site","useState","settings","updateSettings","useEffect","max","placement","title","style","padding","fontWeight","map","num","lg","md","sm","xs","range","step","min","value","disabled","width","marginBottom","onAfterChange","evt","onChange","InputContainer","SettingsInput","SettingsSlider","Slider","BlueHeadingCard","Card","StyledRandDiv","RandHeading","RandSubheading","AmountToIndexMap","IndexToAmountMap","0","1","2","3","4","StyledTotal","maxOwnSite","ControlledSlider","defaultValue","sliderMin","sliderMax","values","setValues","GeneralSettingsCard","loggedin","savedLineupsNumber","permissions","salarySliderMinOffset","maxOwn","className","hoverable","BracketOwnershipSliders","maxSalDefault","minSal","maxSal","minTotalOwn","maxTotalOwn","type","addonBefore","minUnique","_val","Number","target","ceilingPct","margin","Group","marginTop","e","CPTDisplay","addonAfter","qbCptPct","toFixed","rbCptPct","wrCptPct","teCptPct","dstCptPct","kCptPct","color","CheckOutlined","CloseOutlined","rbFlexPct","wrFlexPct","teFlexPct","marginLeft","marks","tooltipVisible","HeadingCard","Settings","state","showUpdateBanner","updateInputValue","val","key","props","slate","week","season","setPreset","index","_settings","presets","data","sport","counter","setState","setTimeout","this","ownership","players","forEach","p","ProjOwn","UserOwn","backgroundImage","FakurianDesign","backgroundRepeat","backgroundSize","changeDateInfo","updateSite","onClick","subscription","loading","overridePerms","opt","nfl","historical_data","cancelText","okText","stopPropagation","onCancel","onConfirm","console","log","resetSiteSettings","message","banner","textAlign","savedLineups","length","connect","lineup","auth","account","fetchOpt","lineupActions"],"mappings":"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","file":"static/js/11.86975e65.chunk.js","sourcesContent":["import { Input } from 'antd'\nimport React, { Component } from 'react'\nimport styled from 'styled-components'\n\nconst SettingsInputSmall = styled(Input)`\n  display: inline-block !important;\n  width: 50px !important;\n`\nconst SettingsContainer = styled.div`\n  margin-top: 8px;\n`\nconst TextSpan = styled.span`\n  color: rgba(0, 0, 0, 0.65);\n  background: #fafafa;\n  border: 1px solid #d9d9d9;\n  padding: 6px 11px;\n  margin-left: -5px;\n`\n\nconst MaxInputForThresholds = [2,4,6]\n\nclass ForcePlayers extends Component {\n  state = {\n    show: 3\n  }\n\n  render() {\n    return(\n      <div>\n        <SettingsContainer>\n          <SettingsInputSmall\n            value={this.props.settings.topN_0force === 0 ? '' : this.props.settings.topN_0force}\n            key='topN_0force'\n            placeholder={0}\n            onChange={evt => {\n              if ((evt.target.value === '' ? 0 : Number(evt.target.value)) <= MaxInputForThresholds[0])\n                this.props.inputOnChange((evt.target.value === '' ? 0 : Number(evt.target.value)), 'topN_0force')\n              else\n                this.props.inputOnChange(MaxInputForThresholds[0], 'topN_0force')\n            }}\n          /> <TextSpan>players in the top {this.props.settings.topN_0thresh}</TextSpan>\n        </SettingsContainer>\n        {\n          this.state.show >= 2 || this.props.settings.topN_1force ? (\n            <SettingsContainer>\n              <SettingsInputSmall\n                value={this.props.settings.topN_1force === 0 ? '' : this.props.settings.topN_1force}\n                key='topN_1force'\n                placeholder={0}\n                onChange={evt => {\n                  if ((evt.target.value === '' ? 0 : Number(evt.target.value)) <= MaxInputForThresholds[1])\n                    this.props.inputOnChange((evt.target.value === '' ? 0 : Number(evt.target.value)), 'topN_1force')\n                  else\n                    this.props.inputOnChange(MaxInputForThresholds[1], 'topN_1force')\n                }}\n              /> <TextSpan>players in the top {this.props.settings.topN_1thresh}</TextSpan>\n            </SettingsContainer>\n          ) : ''\n        }\n        {\n          this.state.show === 3 || this.props.settings.topN_2force ? (\n            <SettingsContainer>\n              <SettingsInputSmall\n                value={this.props.settings.topN_2force === 0 ? '' : this.props.settings.topN_2force}\n                key='topN_2force'\n                placeholder={0}\n                onChange={evt => {\n                  if ((evt.target.value === '' ? 0 : Number(evt.target.value)) <= MaxInputForThresholds[2])\n                    this.props.inputOnChange((evt.target.value === '' ? 0 : Number(evt.target.value)), 'topN_2force')\n                  else\n                    this.props.inputOnChange(MaxInputForThresholds[2], 'topN_2force')\n                }}\n              /> <TextSpan>players in the top {this.props.settings.topN_2thresh}</TextSpan>\n            </SettingsContainer>\n          ) : ''\n        }\n      </div>\n    )\n  }\n}\n\nexport default ForcePlayers\n","import React, { useState, useEffect } from 'react'\nimport { Slider, Tooltip, Row, Col } from 'antd'\nimport styled from 'styled-components'\n\nconst InputLabel = styled.div`\n  font-weight: 600;\n  font-size: 14px;\n`\nconst InlineColPct = styled(Col)`\n  position: relative;\n  top: 7px;\n`\nconst SliderValueLeft = styled.div`\n  color: rgb(0,0,0,0.4);\n  float: left;\n`\nconst SliderValueRight = styled.div`\n  color: rgb(0,0,0,0.4);\n  float: right;\n`\n\nconst underOwnedPercentages = [\n  '2.5%',\n  '5%',\n  '10%',\n  '18%',\n  '25%',\n]\n\nconst maxForSites = {\n  'ya': 5,\n  'dk': 6,\n  'fd': 5\n}\n\nexport default ({\n  minUnderOwn_1,\n  minUnderOwn_2,\n  minUnderOwn_3,\n  minUnderOwn_4,\n  minUnderOwn_5,\n  maxUnderOwn_1,\n  maxUnderOwn_2,\n  maxUnderOwn_3,\n  maxUnderOwn_4,\n  maxUnderOwn_5,\n  inputOnChange,\n  noProjOwn,\n  showdown,\n  site\n}) => {\n  const [ settings, updateSettings ] = useState({\n    minUnderOwn_1,\n    minUnderOwn_2,\n    minUnderOwn_3,\n    minUnderOwn_4,\n    minUnderOwn_5,\n    maxUnderOwn_1,\n    maxUnderOwn_2,\n    maxUnderOwn_3,\n    maxUnderOwn_4,\n    maxUnderOwn_5\n  })\n\n  useEffect(()=> {\n    updateSettings({\n      minUnderOwn_1,\n      minUnderOwn_2,\n      minUnderOwn_3,\n      minUnderOwn_4,\n      minUnderOwn_5,\n      maxUnderOwn_1,\n      maxUnderOwn_2,\n      maxUnderOwn_3,\n      maxUnderOwn_4,\n      maxUnderOwn_5\n    })\n  },\n  [\n    minUnderOwn_1,\n    minUnderOwn_2,\n    minUnderOwn_3,\n    minUnderOwn_4,\n    minUnderOwn_5,\n    maxUnderOwn_1,\n    maxUnderOwn_2,\n    maxUnderOwn_3,\n    maxUnderOwn_4,\n    maxUnderOwn_5\n  ])\n\n  let max = 9\n  if (showdown)\n    max = maxForSites[site]\n\n  return (\n    <div>\n      <InputLabel>\n        <Tooltip\n          placement={'top'}\n          title={'Each lineups total number of players under the given percentages. E.g. To have 3 players under 10% owned in every lineup. move the left 10% slider to 3. To win large-scale tournements, it is imperative to have low-owned players in each lineup'}\n        >\n          <h2>Bracketed Ownership</h2>\n          <div style={{padding: '10px 0px', fontWeight: '500'}}>Number of players under N% owned</div>\n        </Tooltip>\n      </InputLabel>\n      {[1,2,3,4,5].map(num => (\n        <Row key={`n-owned-${num}`}>\n          <InlineColPct lg={3} md={3} sm={3} xs={3}>{underOwnedPercentages[num-1]}</InlineColPct>\n            {\n              noProjOwn ? (\n                <Col lg={21} md={21} sm={21} xs={21}>\n                  <Tooltip title=\"Cannot adjust bracket ownership until there is proj own\">\n                    <Slider\n                      range\n                      step={1}\n                      min={0}\n                      max={max}\n                      value={[0,max]}\n                      disabled={true}\n                      style={{width: '100%', marginBottom: '5px'}}\n                    />\n                    <div>\n                      <SliderValueLeft>{0}</SliderValueLeft>\n                      <SliderValueRight>{max}</SliderValueRight>\n                    </div>\n                  </Tooltip>\n                </Col>\n              ) : (\n                <Col lg={21} md={21} sm={21} xs={21}>\n                  <Slider\n                    range\n                    step={1}\n                    min={0}\n                    max={max}\n                    value={[settings[`minUnderOwn_${num}`],settings[`maxUnderOwn_${num}`]]}\n                    onAfterChange={evt => {\n                      inputOnChange(evt[0], `minUnderOwn_${num}`)\n                      inputOnChange(evt[1], `maxUnderOwn_${num}`)\n                    }}\n                    onChange={(evt) => {\n                      updateSettings({\n                        ...settings,\n                        [`minUnderOwn_${num}`]: evt[0],\n                        [`maxUnderOwn_${num}`]: evt[1],\n                      })\n                    }}\n                    style={{width: '100%', marginBottom: '5px'}}\n                  />\n                  <div>\n                    <SliderValueLeft>{settings[`minUnderOwn_${num}`]}</SliderValueLeft>\n                    <SliderValueRight>{settings[`maxUnderOwn_${num}`]}</SliderValueRight>\n                  </div>\n                </Col>\n              )\n            }\n\n        </Row>\n      ))}\n    </div>\n  )\n}\n","import { Card, Row, Col, Input, Slider, Checkbox, Tooltip, Divider, Radio } from 'antd'\nimport React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport ForcePlayers from './force-players'\nimport BracketOwnershipSliders from './inputs/BracketOwnershipSliders'\nimport {\n  CheckOutlined,\n  CloseOutlined\n} from '@ant-design/icons'\n\nimport { CPTDisplay } from '../../../../utils/showdown'\n\nconst hideTestFeatures = false\n\nconst InputContainer = styled.div`\n  padding: 20px;\n`\nconst InputLabel = styled.div`\n  font-weight: 600;\n  font-size: 14px;\n`\nconst SettingsInput = styled(Input)`\n  .ant-input-group-addon {\n    @media (max-width: 1280px) {\n      font-size: 12px;\n    }\n  }\n`\nconst SettingsSlider = styled(Slider)`\n  width: 80%;\n  display: inline-block;\n`\nconst SliderValueLeft = styled.div`\n  color: rgb(0,0,0,0.4);\n  float: left;\n`\nconst SliderValueRight = styled.div`\n  color: rgb(0,0,0,0.4);\n  float: right;\n`\nconst InlineColPct = styled(Col)`\n  position: relative;\n  top: 7px;\n`\nconst BlueHeadingCard = styled(Card)`\n  .ant-card-head {\n    background-color: #d9e3f2;\n    color: black;\n  }\n`\nconst StyledRandDiv = styled.div`\n  margin: 15px;\n`\nconst RandHeading = styled.div`\n  font-weight: 400;\n  margin: 15px;\n  font-size: 18px;\n`\nconst RandSubheading = styled.div`\n  display: inline-block;\n  font-weight: 600;\n  margin: 10px;\n`\n\nconst AmountToIndexMap = {\n  'none': 0,\n  'low': 1,\n  'med': 2,\n  'high': 3,\n  'very_high': 4\n}\nconst IndexToAmountMap = {\n  0: 'none',\n  1: 'low',\n  2: 'med',\n  3: 'high',\n  4: 'very_high',\n}\nconst AmountToIndexMapOverMax = {\n  'None': 0,\n  'Low': 1,\n  'Medium': 2,\n  'High': 3,\n}\nconst IndexToAmountMapOverMax = {\n  0: 'None',\n  1: 'Low',\n  2: 'Medium',\n  3: 'High',\n}\nconst MAX_LINEUPS = 300\nconst ClickableDiv = styled.div`\n  cursor: pointer;\n  &:hover {\n    font-weight: 600;\n  }\n`\nconst StyledTotal = styled.div`\n  margin-top: 10px;\n  float: right;\n\n  span {\n    margin-right: 5px;\n    font-size: 16px;\n  }\n\n  h3 {\n    display: inline-block;\n  }\n`\n\nconst maxOwnSite = {\n  'dk': 600,\n  'ya': 500,\n  'fd': 500\n}\n\nconst ControlledSlider = ({ defaultValue, sliderMin, sliderMax, step, onAfterChange, disabled }) => {\n  const [ values, setValues ] = useState(defaultValue)\n\n  useEffect(() => {\n    setValues(defaultValue)\n  }, [ defaultValue ])\n\n  return (\n    <SettingsSlider\n      range\n      disabled={disabled}\n      step={step}\n      min={sliderMin}\n      max={sliderMax}\n      value={values}\n      onAfterChange={onAfterChange}\n      onChange={(value) => {\n        // console.log(value)\n        setValues(value)\n      }}\n      style={{width: '100%', marginBottom: '5px'}}\n    />\n  )\n}\n\nconst GeneralSettingsCard = ({ settings, inputOnChange, loggedin, savedLineupsNumber, permissions, site, noProjOwn, showdown }) => {\n  let salarySliderMinOffset = 5000\n  let step = 100\n  let maxOverride = null\n\n  if (site === 'ya') {\n    salarySliderMinOffset = 50\n    step = 1\n\n    // if (showdown)\n    //   maxOverride = 125\n  }\n\n  let maxOwn = 900\n  if (showdown)\n    maxOwn = maxOwnSite[site]\n  // console.log(settings)\n  return (\n    <div>\n      <BlueHeadingCard>\n        <Row>\n          <Col lg={12} className=\"Settings-options-general\">\n            <Card hoverable>\n              <InputContainer>\n                <BracketOwnershipSliders\n                  minUnderOwn_1={settings[\"minUnderOwn_1\"]}\n                  minUnderOwn_2={settings[\"minUnderOwn_2\"]}\n                  minUnderOwn_3={settings[\"minUnderOwn_3\"]}\n                  minUnderOwn_4={settings[\"minUnderOwn_4\"]}\n                  minUnderOwn_5={settings[\"minUnderOwn_5\"]}\n                  maxUnderOwn_1={settings[\"maxUnderOwn_1\"]}\n                  maxUnderOwn_2={settings[\"maxUnderOwn_2\"]}\n                  maxUnderOwn_3={settings[\"maxUnderOwn_3\"]}\n                  maxUnderOwn_4={settings[\"maxUnderOwn_4\"]}\n                  maxUnderOwn_5={settings[\"maxUnderOwn_5\"]}\n                  inputOnChange={inputOnChange}\n                  noProjOwn={noProjOwn}\n                  showdown={showdown}\n                  site={site}\n                />\n              </InputContainer>\n            </Card>\n            <Card hoverable>\n              <InputContainer>\n                <h2 style={{marginBottom: '20px'}}>Lineup Ranges</h2>\n                <InputLabel><Tooltip title={'Lineups will be in this salary range'}>Salary Range</Tooltip></InputLabel>\n                <ControlledSlider\n                  step={step}\n                  sliderMin={showdown ? 0 : settings.maxSalDefault - salarySliderMinOffset}\n                  sliderMax={maxOverride ? maxOverride : settings.maxSalDefault}\n                  defaultValue={[settings.minSal, settings.maxSal]}\n                  onAfterChange={(evt) => {\n                    inputOnChange(evt[0], 'minSal')\n                    inputOnChange(evt[1], 'maxSal')\n                  }}\n                />\n                <div>\n                  <SliderValueLeft>${settings.minSal}</SliderValueLeft>\n                  <SliderValueRight>${settings.maxSal}</SliderValueRight>\n                </div>\n              </InputContainer>\n\n              {\n                /*\n                  <InputContainer>\n                    <InputLabel><Tooltip title={'Force a certain number of your highest exposure players into the same lineups.'}>Force Top Players <a href={\"https://blog.dfsforecast.com/force-top-players/\"}>(What is this?)</a></Tooltip></InputLabel>\n                      <div style={{fontWeight: 400, marginTop: '6px', fontSize: '10px'}}><i>Warning: Using these settings can cause builds to exceed your exposure thresholds.</i></div>\n                      <ForcePlayers settings={settings} inputOnChange={inputOnChange}/>\n                    </InputContainer>\n                */\n              }\n              <InputContainer>\n                <InputLabel><Tooltip placement={'top'} title={'Each lineups total projected ownership will be between these values.'}>Total Ownership</Tooltip></InputLabel>\n                <ControlledSlider\n                  range\n                  step={1}\n                  sliderMin={0}\n                  sliderMax={maxOwn}\n                  disabled={noProjOwn}\n                  defaultValue={[settings.minTotalOwn,settings.maxTotalOwn]}\n                  onAfterChange={evt => {\n                    inputOnChange(evt[0], 'minTotalOwn')\n                    inputOnChange(evt[1], 'maxTotalOwn')\n                  }}\n                  style={{width: '100%', marginBottom: '5px'}}\n                />\n                <div>\n                  <SliderValueLeft>{settings.minTotalOwn}%</SliderValueLeft>\n                  <SliderValueRight>{settings.maxTotalOwn}%</SliderValueRight>\n                </div>\n              </InputContainer>\n              <InputContainer>\n                <SettingsInput\n                  type=\"number\"\n                  addonBefore={(\n                    <Tooltip placement={'top'} title={'Each lineup will be at least this many players different from all other lineups. Note: time of build increases considerably as this increases. Max of 3.'}>\n                      Min. Unique Players\n                    </Tooltip>\n                  )}\n                  value={settings.minUnique}\n                  key='minUnique'\n                  onChange={evt => {\n                    let _val = Number(evt.target.value)\n                    if (_val < 0)\n                      evt.target.value = 0\n                    else if (_val > 3)\n                      evt.target.value = 3\n\n                    inputOnChange(evt.target.value, 'minUnique')\n                  }}\n                />\n              </InputContainer>\n              <InputContainer>\n                <InputLabel><Tooltip placement={'top'} title={'The percent to blend ceiling projections with standard projections'}>Ceiling Projections Blend (%)</Tooltip></InputLabel>\n                <SettingsSlider\n                  style={{width: '100%'}}\n                  min={0}\n                  max={100}\n                  defaultValue={settings.ceilingPct || 0}\n                  onAfterChange={evt => {\n                    inputOnChange(Number(evt), 'ceilingPct')\n                  }}\n                />\n              </InputContainer>\n              <InputContainer>\n                <div style={{margin: '0px 10px 18px 10px'}}>\n                  <Tooltip title={\"Specify how sensitive you want the optimizer to be to going over max exposure on players.\"}><InputLabel>Over Max Exposure Sensitivity</InputLabel></Tooltip>\n                  <Radio.Group\n                    style={{marginTop: '15px'}}\n                    value={settings['OverMax_Sensitivity']}\n                    onChange={(e) => {\n                      inputOnChange(e.target.value, 'OverMax_Sensitivity')\n                    }}\n                  >\n                    <Tooltip title=\"Try to keep exposures within bounds, but always complete the build.\"><Radio value=\"Loose\">Loose</Radio></Tooltip>\n                    <Tooltip title=\"Usually keeps players within exposure bounds, but allows for some flexibility to complete a build.\"><Radio value=\"Balanced\">Balanced</Radio></Tooltip>\n                    <Tooltip title=\"Players must be within exposure bounds or fail the build.\"><Radio value=\"Strict\">Strict</Radio></Tooltip>\n                  </Radio.Group>\n                </div>\n              </InputContainer>\n            </Card>\n          </Col>\n\n          <Col lg={12} className=\"Settings-options-general\">\n            <Card hoverable>\n              <InputContainer>\n                {\n                  showdown ? (\n                    <div>\n                      <h2 style={{marginBottom: '20px'}}>{CPTDisplay[site]} Parameters</h2>\n                      <InputLabel><Tooltip placement={'top'} title={'Each position will occupy the Captain spot no more than X% of the lineups. The sum of percentages must be greater than 100%.'}>Limit {CPTDisplay[site]} Pct.</Tooltip></InputLabel>\n                      <Input\n                        type='number'\n                        addonBefore={'QB'}\n                        addonAfter={'%'}\n                        value={(settings.qbCptPct * 100).toFixed(0)}\n                        style={{margin: '7px 0'}}\n                        onChange={evt => {inputOnChange((Number(evt.target.value) / 100), 'qbCptPct')}}\n                      />\n                      <Input\n                        type='number'\n                        addonBefore={'RB'}\n                        addonAfter={'%'}\n                        value={(settings.rbCptPct * 100).toFixed(0)}\n                        style={{margin: '7px 0'}}\n                        onChange={evt => {inputOnChange((Number(evt.target.value) / 100), 'rbCptPct')}}\n                      />\n                      <Input\n                        type='number'\n                        addonBefore={'WR'}\n                        addonAfter={'%'}\n                        value={(settings.wrCptPct * 100).toFixed(0)}\n                        style={{margin: '7px 0'}}\n                        onChange={evt => {inputOnChange((Number(evt.target.value) / 100), 'wrCptPct')}}\n                      />\n                      <Input\n                        type='number'\n                        addonBefore={'TE'}\n                        addonAfter={'%'}\n                        style={{margin: '7px 0'}}\n                        value={(settings.teCptPct * 100).toFixed(0)}\n                        onChange={evt => {inputOnChange((Number(evt.target.value) / 100), 'teCptPct')}}\n                      />\n                      <Input\n                        type='number'\n                        addonBefore={'DST'}\n                        addonAfter={'%'}\n                        value={(settings.dstCptPct * 100).toFixed(0)}\n                        style={{margin: '7px 0'}}\n                        onChange={evt => {inputOnChange((Number(evt.target.value) / 100), 'dstCptPct')}}\n                      />\n                      <Input\n                        type='number'\n                        addonBefore={'K'}\n                        addonAfter={'%'}\n                        style={{margin: '7px 0'}}\n                        value={(settings.kCptPct * 100).toFixed(0)}\n                        onChange={evt => {inputOnChange((Number(evt.target.value) / 100), 'kCptPct')}}\n                      />\n                      <Row>\n                        <Col lg={24}>\n                          <StyledTotal>\n                            {\n                              (settings.qbCptPct * 100 + settings.rbCptPct * 100 + settings.wrCptPct * 100 + settings.teCptPct * 100 + settings.dstCptPct * 100 + settings.kCptPct * 100) >= 100 ? (\n                                <span style={{color: '#00e600'}}><CheckOutlined /></span>\n                              ) : (\n                                <Tooltip title=\"The total flex pct must be >= 100%\"><span style={{color: '#ff1a1a'}}><CloseOutlined /></span></Tooltip>\n                              )\n                            }\n                            <h3>Total</h3> <h3>{(settings.qbCptPct * 100 + settings.rbCptPct * 100 + settings.wrCptPct * 100 + settings.teCptPct * 100 + settings.dstCptPct * 100 + settings.kCptPct * 100).toFixed(0)}%</h3>\n                          </StyledTotal>\n                          </Col>\n                      </Row>\n                    </div>\n                  ) : (\n                    <div>\n                      <h2 style={{marginBottom: '20px'}}>Flex Parameters</h2>\n                      <InputLabel><Tooltip placement={'top'} title={'Each position will occupy the flex-spot no more than X% of the lineups. The sum of percentages must be greater than 100%.'}>Limit Flex Pct.</Tooltip></InputLabel>\n                      <Input\n                        type='number'\n                        addonBefore={'RB'}\n                        addonAfter={'%'}\n                        value={(settings.rbFlexPct * 100).toFixed(0)}\n                        style={{margin: '7px 0'}}\n                        onChange={evt => {inputOnChange((Number(evt.target.value) / 100), 'rbFlexPct')}}\n                      />\n                      <Input\n                        type='number'\n                        addonBefore={'WR'}\n                        addonAfter={'%'}\n                        value={(settings.wrFlexPct * 100).toFixed(0)}\n                        style={{marginBottom: '7px'}}\n                        onChange={evt => {inputOnChange((Number(evt.target.value) / 100), 'wrFlexPct')}}\n                      />\n                      <Input\n                        type='number'\n                        addonBefore={'TE'}\n                        addonAfter={'%'}\n                        value={(settings.teFlexPct * 100).toFixed(0)}\n                        onChange={evt => {inputOnChange((Number(evt.target.value) / 100), 'teFlexPct')}}\n                      />\n                      <Row>\n                        <Col lg={24}>\n                          <StyledTotal>\n                            {\n                              (settings.teFlexPct * 100 + settings.wrFlexPct * 100 + settings.rbFlexPct * 100) >= 100 ? (\n                                <span style={{color: '#00e600'}}><CheckOutlined /></span>\n                              ) : (\n                                <Tooltip title=\"The total flex pct must be >= 100%\"><span style={{color: '#ff1a1a'}}><CloseOutlined /></span></Tooltip>\n                              )\n                            }\n                            <h3>Total</h3> <h3>{(settings.teFlexPct * 100 + settings.wrFlexPct * 100 + settings.rbFlexPct * 100).toFixed(0)}%</h3>\n                          </StyledTotal>\n                          </Col>\n                      </Row>\n                    </div>\n                  )\n                }\n\n\n              </InputContainer>\n            </Card>\n            <Card hoverable>\n              <InputContainer>\n                <InputLabel><Tooltip placement={'top'} title={'In order to produce unique lineups and to account for imperfect estimations we allow randomness in the optimizer. By default we allow for moderate variations in the given projections and ownership. You can adjust the amounts below.'}><h2>Randomness</h2></Tooltip></InputLabel>  \n                <RandHeading>\n                  Proj Pts\n                </RandHeading>\n                <div style={{marginLeft: '20px'}}>\n                {\n                  showdown ? (\n                    <StyledRandDiv>\n                        <RandSubheading>All</RandSubheading>\n                        <SettingsSlider\n                          marks={{\n                            0: 'None',\n                            1: 'Low',\n                            2: 'Med',\n                            3: 'High',\n                            4: 'Very High',\n                          }}\n                          tooltipVisible={false}\n                          min={0}\n                          max={4}\n                          defaultValue={AmountToIndexMap[settings[`projPtsRandInput`]]}\n                          onAfterChange={evt => {\n                            inputOnChange(IndexToAmountMap[evt], 'projPtsRandInput')\n                          }}\n                          style={{marginLeft: '50px', marginBottom: '10px'}}\n                        />\n                      </StyledRandDiv>\n                  ) : (\n                    <div>\n                      <StyledRandDiv>\n                        <RandSubheading>QB</RandSubheading>\n                        <SettingsSlider\n                          marks={{\n                            0: 'None',\n                            1: 'Low',\n                            2: 'Med',\n                            3: 'High',\n                            4: 'Very High',\n                          }}\n                          tooltipVisible={false}\n                          min={0}\n                          max={4}\n                          defaultValue={AmountToIndexMap[settings[`projPtsRandQB`]]}\n                          onAfterChange={evt => {\n                            inputOnChange(IndexToAmountMap[evt], 'projPtsRandQB')\n                          }}\n                          style={{marginLeft: '50px', marginBottom: '10px'}}\n                        />\n                      </StyledRandDiv>\n                      <StyledRandDiv>\n                      <RandSubheading>RB</RandSubheading>\n                        <SettingsSlider\n                          marks={{\n                            0: 'None',\n                            1: 'Low',\n                            2: 'Med',\n                            3: 'High',\n                            4: 'Very High',\n                          }}\n                          tooltipVisible={false}\n                          min={0}\n                          max={4}\n                          defaultValue={AmountToIndexMap[settings[`projPtsRandRB`]]}\n                          onAfterChange={evt => {\n                            inputOnChange(IndexToAmountMap[evt], 'projPtsRandRB')\n                          }}\n                          style={{marginLeft: '50px', marginBottom: '10px'}}\n                        />\n                      </StyledRandDiv>\n                      <StyledRandDiv>\n                        <RandSubheading>WR</RandSubheading>\n                        <SettingsSlider\n                          marks={{\n                            0: 'None',\n                            1: 'Low',\n                            2: 'Med',\n                            3: 'High',\n                            4: 'Very High',\n                          }}\n                          tooltipVisible={false}\n                          min={0}\n                          max={4}\n                          defaultValue={AmountToIndexMap[settings[`projPtsRandWR`]]}\n                          onAfterChange={evt => {\n                            inputOnChange(IndexToAmountMap[evt], 'projPtsRandWR')\n                          }}\n                          style={{marginLeft: '50px', marginBottom: '10px'}}\n                        />\n                      </StyledRandDiv>\n                      <StyledRandDiv>\n                        <RandSubheading>TE</RandSubheading>\n                        <SettingsSlider\n                          marks={{\n                            0: 'None',\n                            1: 'Low',\n                            2: 'Med',\n                            3: 'High',\n                            4: 'Very High',\n                          }}\n                          tooltipVisible={false}\n                          min={0}\n                          max={4}\n                          defaultValue={AmountToIndexMap[settings[`projPtsRandTE`]]}\n                          onAfterChange={evt => {\n                            inputOnChange(IndexToAmountMap[evt], 'projPtsRandTE')\n                          }}\n                          style={{marginLeft: '50px', marginBottom: '10px'}}\n                        />\n                      </StyledRandDiv>\n                      <StyledRandDiv>\n                        <RandSubheading>DST</RandSubheading>\n                        <SettingsSlider\n                          marks={{\n                            0: 'None',\n                            1: 'Low',\n                            2: 'Med',\n                            3: 'High',\n                            4: 'Very High',\n                          }}\n                          tooltipVisible={false}\n                          min={0}\n                          max={4}\n                          defaultValue={AmountToIndexMap[settings[`projPtsRandDST`]]}\n                          onAfterChange={evt => {\n                            inputOnChange(IndexToAmountMap[evt], 'projPtsRandDST')\n                          }}\n                          style={{marginLeft: '50px', marginBottom: '10px'}}\n                        />\n                      </StyledRandDiv>\n                    </div>\n                  )\n                }\n                \n                </div>\n                <div style={{margin: '50px 10px 50px 10px'}}>\n                  <RandHeading>Proj Own</RandHeading>\n                  <div style={{marginLeft: '30px'}}>\n                    <RandSubheading>ALL</RandSubheading>\n                    <SettingsSlider\n                      marks={{\n                        0: 'None',\n                        1: 'Low',\n                        2: 'Med',\n                        3: 'High',\n                        4: 'Very High',\n                      }}\n                      tooltipVisible={false}\n                      min={0}\n                      max={4}\n                      defaultValue={AmountToIndexMap[settings[`projOwnRandInput`]]}\n                      onAfterChange={evt => {\n                        inputOnChange(IndexToAmountMap[evt], 'projOwnRandInput')\n                      }}\n                      style={{marginLeft: '50px', marginBottom: '10px'}}\n                    />\n                  </div>\n                </div>\n              </InputContainer>\n            </Card>\n          </Col>\n        </Row>\n      </BlueHeadingCard>\n    </div>\n  )\n}\n\n/*\n\n</Col>\n<Col lg={8}>\n<SettingsInput\n  type=\"number\"\n  value={settings.data.luWithStackPct}\n  key='luWithStackPct'\n  title='Lineup Percentage with Stacks'\n  onChange={evt => inputOnChange(evt, 'luWithStackPct')}\n/>\n</Col>\n*/\n\nexport default GeneralSettingsCard\n","import React, { Component } from 'react'\nimport { Row, Col, Card, Menu, Dropdown, Button, Alert, Popconfirm } from 'antd'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { CrownOutlined } from '@ant-design/icons'\n\nimport * as lineupActions from '../../../../actions/lineup'\nimport FakurianDesign from '../../../../assets/images/backgrounds/fakurian-design-light.png'\n\nimport GeneralSettingsCard from './general-settings-card'\nimport { cache_settings } from '../../../../utils/sport-settings'\nimport { SectionHeaderTitle } from '../../../../components/section-header-title'\nimport { week } from '../../../../utils/nfl-week'\n\nimport { overridePerms } from '../../../../constants/partner'\n\nimport './Settings.css'\n\nconst SettingsContainer = styled.div`\n`\nconst HeadingCard = styled(Card)`\n  &.ant-card {\n    border-top-right-radius: 25px;\n    border-top-left-radius: 25px;\n  }\n`\n\nclass Settings extends Component {\n  static propTypes = {\n    // Redux State goes here\n    fetchOpt: PropTypes.func.isRequired,\n    updateSettings: PropTypes.func.isRequired,\n  }\n\n  state = {\n    showUpdateBanner: false\n  }\n\n  updateInputValue = (val, key) => {\n    this.props.updateSettings( { \n      site: this.props.site, \n      slate: this.props.slate, \n      [key]: val, \n      sport: 'nfl',\n      counter: this.props.week, \n      season: this.props.season\n     } )\n  }\n\n  setPreset = (index) => {\n    const _settings = this.props.presets.data[index]\n\n    this.props.updateSettings( { sport: 'nfl', site: this.props.site, slate: this.props.slate, counter: this.props.week, season: this.props.season, ..._settings } )\n    this.setState({\n      showUpdateBanner: true\n    })\n\n    setTimeout(() => {\n      this.setState({\n        showUpdateBanner: false\n      })\n    }, 2000)\n  }\n\n  render() {\n    const { settings } = this.props\n\n    // Check to see if we have no ownership\n    let ownership = false\n    this.props.players.data.forEach(p => {\n      if (Number(p.ProjOwn || 0) !== 0 || Number(p.UserOwn || 0) !== 0) {\n        ownership = true\n        return\n      }\n    })\n\n    const noProjOwn = !ownership\n\n    return (\n      <div className=\"Settings\">\n        <SettingsContainer>\n          <HeadingCard style={{backgroundImage: `url(${FakurianDesign})`, backgroundRepeat: 'no-repeat', backgroundSize: '100% auto'}}>\n            <Row>\n              <Col lg={5}>\n                <h1>General Settings</h1>\n                <SectionHeaderTitle sport={'nfl'} site={this.props.site} counter={this.props.week} season={this.props.season} changeDateInfo={this.props.changeDateInfo} updateSite={this.props.updateSite} />\n              </Col>\n              <Col lg={4}>\n                {\n                  (this.props.showdown && (this.props.site !== 'dk')) ? '' : (\n                    <Button\n                      style={{marginTop: '18px'}}\n                      onClick={() => this.setPreset(0)}\n                      disabled={this.props.subscription.loading || (!overridePerms && (this.props.subscription.permissions && !this.props.subscription.permissions.opt.nfl.historical_data))}\n                    >\n                      Use Presets\n                    </Button>\n                  )\n                }\n              </Col>\n              <Col lg={4}>\n                <Popconfirm\n                  cancelText=\"No\"\n                  okText=\"Yes\"\n                  onClick={(e) => e.stopPropagation()}\n                  onCancel={(e) => e.stopPropagation()}\n                  onConfirm={\n                    (e) => {\n                      e.stopPropagation()\n                      console.log(this.props.week)\n                      this.props.resetSiteSettings({site: this.props.site, slate: this.props.slate, showdown: this.props.showdown, counter: this.props.week, season: this.props.season})\n\n                      this.setState({\n                        showUpdateBanner: true\n                      })\n\n                      setTimeout(() => {\n                        this.setState({\n                          showUpdateBanner: false\n                        })\n                      }, 2000)\n                    }\n                  }\n                  title={`Permenantly clear all saved settings for the ${this.props.slate} slate?`}\n                >\n                  <Button\n                    style={{marginTop: '8px'}}\n                  >\n                    Reset Settings\n                  </Button>\n                </Popconfirm>\n              </Col>\n            </Row>\n          </HeadingCard>\n          {\n            this.state.showUpdateBanner ? (\n              <Alert\n                message=\"Settings updated\"\n                banner={true}\n                type=\"success\"\n                style={{textAlign: 'center'}}\n              />\n            ) : ''\n          }\n          <GeneralSettingsCard\n            settings={settings.data}\n            inputOnChange={this.updateInputValue}\n            loggedin={this.props.loggedin}\n            savedLineupsNumber={this.props.savedLineups.data ? this.props.savedLineups.data.length / 9 : 0}\n            permissions={this.props.subscription.permissions}\n            site={this.props.site}\n            noProjOwn={noProjOwn}\n            showdown={this.props.showdown}\n          />\n        </SettingsContainer>\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    settings: state.lineup.settings,\n    loggedin: state.auth.loggedin,\n    savedLineups: state.lineup.savedLineups,\n    subscription: state.account.subscription,\n    presets: state.lineup.presets,\n  }),\n  {\n    fetchOpt: lineupActions.fetchOpt,\n    updateSettings: lineupActions.updateSettings,\n    resetSiteSettings: lineupActions.resetSiteSettings\n  }\n)(Settings)\n"],"sourceRoot":""}